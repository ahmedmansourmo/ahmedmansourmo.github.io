[["Map",1,2,9,10,36,37],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.5.4","content-config-digest","c128d586e8dfb604","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","project",["Map",11,12,20,21,28,29],"project-1",{"id":11,"data":13,"filePath":19},{"title":14,"description":15,"image":16,"slug":11,"liveSiteURL":17,"githubURL":18},"Portfolio Website","A personal portfolio website showcasing my projects, skills, and blog posts. Built with Astro, TailwindCSS, and React.","/images/projects/project-1.png","https://a-mansour-portfolio.netlify.app/","https://github.com/ahmedmansour200/portfolio-website","src/data/projects.json","project-2",{"id":20,"data":22,"filePath":19},{"title":23,"description":24,"image":25,"slug":20,"liveSiteURL":26,"githubURL":27},"Todo App","This Todo application was developed to demonstrate a modern web development stack combining the power of Next.js for a fast and efficient front-end, Clerk for seamless and secure user authentication, and MongoDB","/images/projects/project-2.png","https://todo-app-ivory-eta-81.vercel.app/","https://github.com/ahmedmansour200/Todo_app","project-3",{"id":28,"data":30,"filePath":19},{"title":31,"description":32,"image":33,"slug":28,"liveSiteURL":34,"githubURL":35},"Food Delivery","A food delivery application built with React, Firebase, and JSON Server. It allows users to browse restaurants, place orders, and track deliveries.","/images/projects/project-3.png","https://foodapp-a0fee.web.app/","https://github.com/ahmedmansour200/FoodDelivery","blog",["Map",38,39,74,75,116,117,160,161,198,199,263,264],"post1",{"id":38,"data":40,"body":49,"filePath":50,"digest":51,"rendered":52},{"title":41,"description":42,"date":43,"tags":44,"image":48},"How to Optimize React Apps for Speed","Learn how to reduce bundle sizes, improve rendering efficiency, and optimize performance in React apps.","2025-03-01",[45,46,47],"Nuxt","JavaScript","Blog","/images/posts/post-1.jpg","When thinking about DevOps, the focus is often on automation, CI/CD pipelines, and infrastructure management. However, one of the most critical yet overlooked aspects is documentation. A well-documented system saves time, improves collaboration, and reduces deployment risks, all of which are essential for a smooth DevOps workflow.\n\n## Why Documentation Matters in DevOps\n\nA well-documented process allows new team members to onboard faster, reducing the time spent figuring out existing workflows and infrastructure. Without clear documentation, teams rely on tribal knowledge, which creates bottlenecks and risks when key team members leave.\n\nDuring incidents, engineers need immediate access to troubleshooting steps. Clear runbooks and response guides help reduce downtime and ensure a quick resolution. Documentation also plays a key role in compliance, making it easier to meet security and audit requirements such as SOC 2, ISO 27001, and GDPR.\n\n## What Should Be Documented\n\nInfrastructure and architecture documentation should include details about cloud environments, networking configurations, and security policies. CI/CD pipelines need clear instructions on the build, test, and deployment processes, along with troubleshooting steps for failures.\n\nIncident response and monitoring should have detailed runbooks, alerting systems, and rollback procedures. Team workflows and best practices, such as Git branching strategies, code reviews, and deployment strategies, should also be documented to maintain consistency across teams.\n\n## How to Maintain Useful Documentation\n\nOne of the biggest challenges with documentation is keeping it up to date. It should be concise, actionable, and written in a way that helps engineers find information quickly. Using structured formats like Markdown, storing documentation in Git repositories, and integrating it into existing tools like Slack or Jira can help ensure it remains accessible.\n\nAutomation can also reduce the burden of documentation. Infrastructure diagrams can be generated automatically, and Git hooks can enforce documentation updates alongside code changes. Treating documentation as code, with versioning and reviews, helps maintain its accuracy and relevance.\n\n## Conclusion\n\nDocumentation is a critical part of DevOps that enables faster onboarding, reduces downtime, and ensures compliance. While it may not seem as urgent as automation or infrastructure management, its long-term benefits are significant. Teams that prioritize documentation create more scalable, resilient, and efficient DevOps workflows.","src/data/blog/post1.md","31a4294032f6e88b",{"html":53,"metadata":54},"\u003Cp>When thinking about DevOps, the focus is often on automation, CI/CD pipelines, and infrastructure management. However, one of the most critical yet overlooked aspects is documentation. A well-documented system saves time, improves collaboration, and reduces deployment risks, all of which are essential for a smooth DevOps workflow.\u003C/p>\n\u003Ch2 id=\"why-documentation-matters-in-devops\">Why Documentation Matters in DevOps\u003C/h2>\n\u003Cp>A well-documented process allows new team members to onboard faster, reducing the time spent figuring out existing workflows and infrastructure. Without clear documentation, teams rely on tribal knowledge, which creates bottlenecks and risks when key team members leave.\u003C/p>\n\u003Cp>During incidents, engineers need immediate access to troubleshooting steps. Clear runbooks and response guides help reduce downtime and ensure a quick resolution. Documentation also plays a key role in compliance, making it easier to meet security and audit requirements such as SOC 2, ISO 27001, and GDPR.\u003C/p>\n\u003Ch2 id=\"what-should-be-documented\">What Should Be Documented\u003C/h2>\n\u003Cp>Infrastructure and architecture documentation should include details about cloud environments, networking configurations, and security policies. CI/CD pipelines need clear instructions on the build, test, and deployment processes, along with troubleshooting steps for failures.\u003C/p>\n\u003Cp>Incident response and monitoring should have detailed runbooks, alerting systems, and rollback procedures. Team workflows and best practices, such as Git branching strategies, code reviews, and deployment strategies, should also be documented to maintain consistency across teams.\u003C/p>\n\u003Ch2 id=\"how-to-maintain-useful-documentation\">How to Maintain Useful Documentation\u003C/h2>\n\u003Cp>One of the biggest challenges with documentation is keeping it up to date. It should be concise, actionable, and written in a way that helps engineers find information quickly. Using structured formats like Markdown, storing documentation in Git repositories, and integrating it into existing tools like Slack or Jira can help ensure it remains accessible.\u003C/p>\n\u003Cp>Automation can also reduce the burden of documentation. Infrastructure diagrams can be generated automatically, and Git hooks can enforce documentation updates alongside code changes. Treating documentation as code, with versioning and reviews, helps maintain its accuracy and relevance.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Documentation is a critical part of DevOps that enables faster onboarding, reduces downtime, and ensures compliance. While it may not seem as urgent as automation or infrastructure management, its long-term benefits are significant. Teams that prioritize documentation create more scalable, resilient, and efficient DevOps workflows.\u003C/p>",{"headings":55,"localImagePaths":69,"remoteImagePaths":70,"frontmatter":71,"imagePaths":73},[56,60,63,66],{"depth":57,"slug":58,"text":59},2,"why-documentation-matters-in-devops","Why Documentation Matters in DevOps",{"depth":57,"slug":61,"text":62},"what-should-be-documented","What Should Be Documented",{"depth":57,"slug":64,"text":65},"how-to-maintain-useful-documentation","How to Maintain Useful Documentation",{"depth":57,"slug":67,"text":68},"conclusion","Conclusion",[],[],{"title":41,"description":42,"date":43,"image":48,"tags":72},[45,46,47],[],"post4",{"id":74,"data":76,"body":83,"filePath":84,"digest":85,"rendered":86},{"title":77,"description":78,"date":79,"tags":80,"image":48},"JavaScript let vs var vs const — The Key Differences","Learn when to use const, let, and why to avoid var in JavaScript. Covers scope, hoisting, reassignment, redeclaration, and common pitfalls with examples.","2025-08-24",[46,81,82],"ES6","Basics","Choosing between const, let, and var impacts how predictable and safe your code is. Here’s a quick guide with examples.\n\n## TL;DR rules\n\n- Use const by default. It prevents accidental reassignment.\n- Use let only when you must reassign (counters, state updates, loops).\n- Avoid var. It’s function-scoped, hoisted differently, and can cause subtle bugs.\n\n## Scope differences\n\n- var → function-scoped (or global if declared at top level)\n- let/const → block-scoped ({}), safer in loops and conditionals\n\n```js\nfunction demo() {\n  if (true) {\n    var a = 1;     // function-scoped\n    let b = 2;     // block-scoped\n    const c = 3;   // block-scoped\n  }\n  console.log(a); // 1\n  // console.log(b); // ReferenceError\n  // console.log(c); // ReferenceError\n}\ndemo();\n```\n\n## Hoisting and the Temporal Dead Zone (TDZ)\n\n- var is hoisted and initialized to undefined.\n- let/const are hoisted but uninitialized until the declaration line (TDZ). Accessing before that throws a ReferenceError.\n\n```js\nconsole.log(a); // undefined (var is hoisted)\n// console.log(b); // ReferenceError (TDZ)\n// console.log(c); // ReferenceError (TDZ)\nvar a = 1;\nlet b = 2;\nconst c = 3;\n```\n\n## Reassignment and redeclaration\n\n- const: no reassignment; object contents can still be mutated.\n- let: can reassign; cannot redeclare in the same scope.\n- var: can reassign and redeclare (another reason to avoid).\n\n```js\nconst person = { name: \"Ada\" };\n// person = {}; // ❌ TypeError (no reassignment)\nperson.name = \"Lovelace\"; // ✅ allowed (mutation)\n\nlet count = 0;\ncount = 1; // ✅ reassignment allowed\n// let count = 2; // ❌ SyntaxError (redeclaration in same scope)\n\nvar x = 1;\nvar x = 2; // ✅ redeclaration allowed (can hide bugs)\n```\n\n## Loops: why let/const shine\n\n```js\n// Using var leaks the index outside the loop and shares one binding across iterations\nfor (var i = 0; i \u003C 3; i++) {\n  setTimeout(() => console.log(\"var i:\", i), 0);\n}\n// → prints 3, 3, 3\n\n// Using let creates a new binding each iteration (expected values)\nfor (let j = 0; j \u003C 3; j++) {\n  setTimeout(() => console.log(\"let j:\", j), 0);\n}\n// → prints 0, 1, 2\n```\n\n## Practical guidelines\n\n- Prefer const for values that shouldn’t change (config, imported data, functions).\n- Use let for counters, accumulators, or state that changes over time.\n- Don’t use var in modern codebases.\n\n## Summary\n\nUse const by default, let when you must reassign, and avoid var. This leads to safer, more predictable JavaScript.","src/data/blog/post4.md","9d4848c1b9d37b20",{"html":87,"metadata":88},"\u003Cp>Choosing between const, let, and var impacts how predictable and safe your code is. Here’s a quick guide with examples.\u003C/p>\n\u003Ch2 id=\"tldr-rules\">TL;DR rules\u003C/h2>\n\u003Cul>\n\u003Cli>Use const by default. It prevents accidental reassignment.\u003C/li>\n\u003Cli>Use let only when you must reassign (counters, state updates, loops).\u003C/li>\n\u003Cli>Avoid var. It’s function-scoped, hoisted differently, and can cause subtle bugs.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"scope-differences\">Scope differences\u003C/h2>\n\u003Cul>\n\u003Cli>var → function-scoped (or global if declared at top level)\u003C/li>\n\u003Cli>let/const → block-scoped ({}), safer in loops and conditionals\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> demo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;     \u003C/span>\u003Cspan style=\"color:#6A737D\">// function-scoped\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;     \u003C/span>\u003Cspan style=\"color:#6A737D\">// block-scoped\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> c\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;   \u003C/span>\u003Cspan style=\"color:#6A737D\">// block-scoped\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a); \u003C/span>\u003Cspan style=\"color:#6A737D\">// 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // console.log(b); // ReferenceError\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // console.log(c); // ReferenceError\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">demo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"hoisting-and-the-temporal-dead-zone-tdz\">Hoisting and the Temporal Dead Zone (TDZ)\u003C/h2>\n\u003Cul>\n\u003Cli>var is hoisted and initialized to undefined.\u003C/li>\n\u003Cli>let/const are hoisted but uninitialized until the declaration line (TDZ). Accessing before that throws a ReferenceError.\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a); \u003C/span>\u003Cspan style=\"color:#6A737D\">// undefined (var is hoisted)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// console.log(b); // ReferenceError (TDZ)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// console.log(c); // ReferenceError (TDZ)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> c\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"reassignment-and-redeclaration\">Reassignment and redeclaration\u003C/h2>\n\u003Cul>\n\u003Cli>const: no reassignment; object contents can still be mutated.\u003C/li>\n\u003Cli>let: can reassign; cannot redeclare in the same scope.\u003C/li>\n\u003Cli>var: can reassign and redeclare (another reason to avoid).\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> person\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Ada\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// person = {}; // ❌ TypeError (no reassignment)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">person.name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Lovelace\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// ✅ allowed (mutation)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// ✅ reassignment allowed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// let count = 2; // ❌ SyntaxError (redeclaration in same scope)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// ✅ redeclaration allowed (can hide bugs)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"loops-why-letconst-shine\">Loops: why let/const shine\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Using var leaks the index outside the loop and shares one binding across iterations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"var i:\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, i), \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// → prints 3, 3, 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Using let creates a new binding each iteration (expected values)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; j \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; j\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"let j:\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, j), \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// → prints 0, 1, 2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"practical-guidelines\">Practical guidelines\u003C/h2>\n\u003Cul>\n\u003Cli>Prefer const for values that shouldn’t change (config, imported data, functions).\u003C/li>\n\u003Cli>Use let for counters, accumulators, or state that changes over time.\u003C/li>\n\u003Cli>Don’t use var in modern codebases.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"summary\">Summary\u003C/h2>\n\u003Cp>Use const by default, let when you must reassign, and avoid var. This leads to safer, more predictable JavaScript.\u003C/p>",{"headings":89,"localImagePaths":111,"remoteImagePaths":112,"frontmatter":113,"imagePaths":115},[90,93,96,99,102,105,108],{"depth":57,"slug":91,"text":92},"tldr-rules","TL;DR rules",{"depth":57,"slug":94,"text":95},"scope-differences","Scope differences",{"depth":57,"slug":97,"text":98},"hoisting-and-the-temporal-dead-zone-tdz","Hoisting and the Temporal Dead Zone (TDZ)",{"depth":57,"slug":100,"text":101},"reassignment-and-redeclaration","Reassignment and redeclaration",{"depth":57,"slug":103,"text":104},"loops-why-letconst-shine","Loops: why let/const shine",{"depth":57,"slug":106,"text":107},"practical-guidelines","Practical guidelines",{"depth":57,"slug":109,"text":110},"summary","Summary",[],[],{"title":77,"description":78,"date":79,"image":48,"tags":114},[46,81,82],[],"post2",{"id":116,"data":118,"body":124,"filePath":125,"digest":126,"rendered":127},{"title":119,"description":120,"date":121,"tags":122,"image":48},"Modern JavaScript ES6+ Features You Should Know","Explore the most useful ES6+ features like arrow functions, destructuring, template literals, and async/await for better JavaScript development.","2025-04-15",[46,81,123],"Modern Development","JavaScript has evolved significantly with ES6 (ECMAScript 2015) and subsequent versions. These modern features make code more readable, concise, and maintainable. Here are the essential ES6+ features every developer should master.\n\n## Arrow Functions\n\nArrow functions provide a more concise syntax for writing functions and automatically bind the `this` context.\n\n```javascript\n// Traditional function\nconst traditional = function(x, y) {\n  return x + y;\n};\n\n// Arrow function\nconst modern = (x, y) => x + y;\n\n// Single parameter, no parentheses needed\nconst square = x => x * x;\n```\n\n## Destructuring Assignment\n\nExtract values from arrays or properties from objects into distinct variables.\n\n```javascript\n// Array destructuring\nconst [first, second, ...rest] = [1, 2, 3, 4, 5];\n\n// Object destructuring\nconst { name, age, city = 'Unknown' } = user;\n\n// Function parameter destructuring\nconst greet = ({ name, age }) => `Hello ${name}, you are ${age}`;\n```\n\n## Template Literals\n\nCreate strings with embedded expressions using backticks instead of quotes.\n\n```javascript\nconst name = 'Ahmed';\nconst age = 25;\n\n// Template literal with expressions\nconst message = `Hello, my name is ${name} and I'm ${age} years old.`;\n\n// Multi-line strings\nconst html = `\n  \u003Cdiv>\n    \u003Ch1>${name}\u003C/h1>\n    \u003Cp>Age: ${age}\u003C/p>\n  \u003C/div>\n`;\n```\n\n## Async/Await\n\nHandle asynchronous operations with cleaner, more readable syntax.\n\n```javascript\n// Promise-based approach\nfunction fetchUserData() {\n  return fetch('/api/user')\n    .then(response => response.json())\n    .then(data => processData(data))\n    .catch(error => handleError(error));\n}\n\n// Async/await approach\nasync function fetchUserData() {\n  try {\n    const response = await fetch('/api/user');\n    const data = await response.json();\n    return processData(data);\n  } catch (error) {\n    handleError(error);\n  }\n}\n```\n\n## Spread and Rest Operators\n\nThe `...` operator can spread elements or collect them into arrays/objects.\n\n```javascript\n// Spread arrays\nconst arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5]; // [1, 2, 3, 4, 5]\n\n// Spread objects\nconst obj1 = { name: 'Ahmed', age: 25 };\nconst obj2 = { ...obj1, city: 'Cairo' };\n\n// Rest parameters\nconst sum = (...numbers) => numbers.reduce((a, b) => a + b, 0);\n```\n\n## Default Parameters\n\nSet default values for function parameters.\n\n```javascript\nfunction greet(name = 'Anonymous', message = 'Hello') {\n  return `${message}, ${name}!`;\n}\n\ngreet(); // \"Hello, Anonymous!\"\ngreet('Ahmed'); // \"Hello, Ahmed!\"\ngreet('Ahmed', 'Hi'); // \"Hi, Ahmed!\"\n```\n\n## Modules (Import/Export)\n\nOrganize code into reusable modules.\n\n```javascript\n// utils.js - Named exports\nexport const formatDate = (date) => date.toLocaleDateString();\nexport const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\n// math.js - Default export\nconst calculator = {\n  add: (a, b) => a + b,\n  subtract: (a, b) => a - b,\n};\nexport default calculator;\n\n// main.js - Import\nimport calculator from './math.js';\nimport { formatDate, capitalize } from './utils.js';\n```\n\n## Why Use These Features?\n\n- **Cleaner Code**: Less boilerplate and more expressive syntax\n- **Better Performance**: Some features like arrow functions can be optimized better\n- **Enhanced Readability**: Code intentions are clearer\n- **Modern Standards**: Industry-standard practices expected in modern codebases\n\nStart incorporating these features gradually into your projects. They'll make your JavaScript more maintainable and enjoyable to work with!","src/data/blog/post2.md","af8c0c361670cf6d",{"html":128,"metadata":129},"\u003Cp>JavaScript has evolved significantly with ES6 (ECMAScript 2015) and subsequent versions. These modern features make code more readable, concise, and maintainable. Here are the essential ES6+ features every developer should master.\u003C/p>\n\u003Ch2 id=\"arrow-functions\">Arrow Functions\u003C/h2>\n\u003Cp>Arrow functions provide a more concise syntax for writing functions and automatically bind the \u003Ccode>this\u003C/code> context.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Traditional function\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> traditional\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Arrow function\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> modern\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Single parameter, no parentheses needed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> square\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"destructuring-assignment\">Destructuring Assignment\u003C/h2>\n\u003Cp>Extract values from arrays or properties from objects into distinct variables.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Array destructuring\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">first\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">second\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#79B8FF\">rest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Object destructuring\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">age\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">city\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Unknown'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Function parameter destructuring\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> greet\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">age\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `Hello ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}, you are ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">age\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"template-literals\">Template Literals\u003C/h2>\n\u003Cp>Create strings with embedded expressions using backticks instead of quotes.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Ahmed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> age\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 25\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Template literal with expressions\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> message\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `Hello, my name is ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} and I'm ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">age\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} years old.`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Multi-line strings\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> html\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  &#x3C;div>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    &#x3C;h1>${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}&#x3C;/h1>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    &#x3C;p>Age: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">age\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}&#x3C;/p>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  &#x3C;/div>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"asyncawait\">Async/Await\u003C/h2>\n\u003Cp>Handle asynchronous operations with cleaner, more readable syntax.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Promise-based approach\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchUserData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/api/user'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">response\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> processData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Async/await approach\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchUserData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> response\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/api/user'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> data\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> processData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    handleError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"spread-and-rest-operators\">Spread and Rest Operators\u003C/h2>\n\u003Cp>The \u003Ccode>...\u003C/code> operator can spread elements or collect them into arrays/objects.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Spread arrays\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> arr1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> arr2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">arr1, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// [1, 2, 3, 4, 5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Spread objects\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Ahmed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, age: \u003C/span>\u003Cspan style=\"color:#79B8FF\">25\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">obj1, city: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Cairo'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Rest parameters\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> sum\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">numbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numbers.\u003C/span>\u003Cspan style=\"color:#B392F0\">reduce\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">b\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"default-parameters\">Default Parameters\u003C/h2>\n\u003Cp>Set default values for function parameters.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Anonymous'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Hello'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">message\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}, ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"Hello, Anonymous!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Ahmed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"Hello, Ahmed!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Ahmed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hi'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"Hi, Ahmed!\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"modules-importexport\">Modules (Import/Export)\u003C/h2>\n\u003Cp>Organize code into reusable modules.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// utils.js - Named exports\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#B392F0\"> formatDate\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> date.\u003C/span>\u003Cspan style=\"color:#B392F0\">toLocaleDateString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#B392F0\"> capitalize\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> str.\u003C/span>\u003Cspan style=\"color:#B392F0\">charAt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">toUpperCase\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> str.\u003C/span>\u003Cspan style=\"color:#B392F0\">slice\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// math.js - Default export\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> calculator\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">b\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  subtract\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">b\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> calculator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// main.js - Import\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> calculator \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './math.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { formatDate, capitalize } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './utils.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"why-use-these-features\">Why Use These Features?\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Cleaner Code\u003C/strong>: Less boilerplate and more expressive syntax\u003C/li>\n\u003Cli>\u003Cstrong>Better Performance\u003C/strong>: Some features like arrow functions can be optimized better\u003C/li>\n\u003Cli>\u003Cstrong>Enhanced Readability\u003C/strong>: Code intentions are clearer\u003C/li>\n\u003Cli>\u003Cstrong>Modern Standards\u003C/strong>: Industry-standard practices expected in modern codebases\u003C/li>\n\u003C/ul>\n\u003Cp>Start incorporating these features gradually into your projects. They’ll make your JavaScript more maintainable and enjoyable to work with!\u003C/p>",{"headings":130,"localImagePaths":155,"remoteImagePaths":156,"frontmatter":157,"imagePaths":159},[131,134,137,140,143,146,149,152],{"depth":57,"slug":132,"text":133},"arrow-functions","Arrow Functions",{"depth":57,"slug":135,"text":136},"destructuring-assignment","Destructuring Assignment",{"depth":57,"slug":138,"text":139},"template-literals","Template Literals",{"depth":57,"slug":141,"text":142},"asyncawait","Async/Await",{"depth":57,"slug":144,"text":145},"spread-and-rest-operators","Spread and Rest Operators",{"depth":57,"slug":147,"text":148},"default-parameters","Default Parameters",{"depth":57,"slug":150,"text":151},"modules-importexport","Modules (Import/Export)",{"depth":57,"slug":153,"text":154},"why-use-these-features","Why Use These Features?",[],[],{"title":119,"description":120,"date":121,"image":48,"tags":158},[46,81,123],[],"post6",{"id":160,"data":162,"body":170,"filePath":171,"digest":172,"rendered":173},{"title":163,"description":164,"date":79,"tags":165,"image":48},"SSR vs CSR — Which Rendering Strategy Should You Use?","A practical comparison of Server-Side Rendering (SSR) and Client-Side Rendering (CSR)—how they work, trade-offs, performance, SEO, and when to choose each.",[166,167,168,169],"Web","SSR","CSR","Performance","Understanding rendering strategies helps you deliver fast, SEO-friendly, and maintainable web apps. Here’s a concise guide to SSR vs CSR.\n\n## What is CSR (Client-Side Rendering)?\n\nThe server sends a minimal HTML shell and a JavaScript bundle. The browser downloads JS, builds the UI, and fetches data. First paint can be fast, but content may be blank until hydration completes.\n\nPros:\n- Great for rich, highly interactive apps\n- Can cache static assets on CDN\n- Simple hosting (static + API)\n\nCons:\n- Slower Time to First Byte (TTFB) and First Contentful Paint (FCP)\n- SEO depends on prerendering/bot support\n- Heavier JS on the client\n\nCSR example (React):\n\n```jsx\nfunction Products() {\n  const [items, setItems] = React.useState([]);\n  React.useEffect(() => {\n    fetch('/api/products').then(r => r.json()).then(setItems);\n  }, []);\n  return items.map(p => \u003Cdiv key={p.id}>{p.name}\u003C/div>);\n}\n```\n\n## What is SSR (Server-Side Rendering)?\n\nHTML is rendered on the server per request (or edge) and sent to the browser. Users see content earlier; hydration attaches interactivity on the client.\n\nPros:\n- Better FCP/LCP and perceived performance\n- SEO-friendly out of the box\n- Personalized content at request time\n\nCons:\n- Higher server cost/complexity\n- Longer TTFB if server/data is slow\n- Still ships client JS for interactivity\n\nSSR example (Next.js):\n\n```jsx\n// pages/products.js (Next 12/13 pages router)\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/products');\n  const items = await res.json();\n  return { props: { items } };\n}\nexport default function Page({ items }) {\n  return items.map(p => \u003Cdiv key={p.id}>{p.name}\u003C/div>);\n}\n```\n\n## Performance and SEO\n\n- CSR: use code-splitting, lazy, and route-based bundles; prefetch data and cache aggressively.\n- SSR: stream HTML, cache at the edge, and avoid slow blocking calls. Hydrate only what’s interactive.\n\nKey metrics: TTFB (server), FCP/LCP (paint), TTI (hydration/JS), CLS (layout stability).\n\n## When to choose which?\n\n- Choose CSR when: app is SPA-like, authentication heavy, and SEO is limited or handled via prerendering.\n- Choose SSR when: SEO matters, content must be visible fast, or you need per-request personalization.\n\n## Hybrids and modern options\n\n- SSG/ISR: pre-render at build time and revalidate for scale.\n- Islands/Partial Hydration (Astro): render most HTML on server, hydrate only interactive islands—great DX and performance.\n- Edge SSR/Streaming: reduce latency and show content progressively.\n\n## Summary\n\nThere’s no one-size-fits-all. Use SSR for content-first and SEO; use CSR for app-first interactivity. Many stacks mix both for the best user experience.","src/data/blog/post6.md","db51bed2285b7720",{"html":174,"metadata":175},"\u003Cp>Understanding rendering strategies helps you deliver fast, SEO-friendly, and maintainable web apps. Here’s a concise guide to SSR vs CSR.\u003C/p>\n\u003Ch2 id=\"what-is-csr-client-side-rendering\">What is CSR (Client-Side Rendering)?\u003C/h2>\n\u003Cp>The server sends a minimal HTML shell and a JavaScript bundle. The browser downloads JS, builds the UI, and fetches data. First paint can be fast, but content may be blank until hydration completes.\u003C/p>\n\u003Cp>Pros:\u003C/p>\n\u003Cul>\n\u003Cli>Great for rich, highly interactive apps\u003C/li>\n\u003Cli>Can cache static assets on CDN\u003C/li>\n\u003Cli>Simple hosting (static + API)\u003C/li>\n\u003C/ul>\n\u003Cp>Cons:\u003C/p>\n\u003Cul>\n\u003Cli>Slower Time to First Byte (TTFB) and First Contentful Paint (FCP)\u003C/li>\n\u003Cli>SEO depends on prerendering/bot support\u003C/li>\n\u003Cli>Heavier JS on the client\u003C/li>\n\u003C/ul>\n\u003Cp>CSR example (React):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Products\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">items\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setItems\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React.\u003C/span>\u003Cspan style=\"color:#B392F0\">useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  React.\u003C/span>\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/api/products'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">r\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> r.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(setItems);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, []);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> items.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">p\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{p.id}>{p.name}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"what-is-ssr-server-side-rendering\">What is SSR (Server-Side Rendering)?\u003C/h2>\n\u003Cp>HTML is rendered on the server per request (or edge) and sent to the browser. Users see content earlier; hydration attaches interactivity on the client.\u003C/p>\n\u003Cp>Pros:\u003C/p>\n\u003Cul>\n\u003Cli>Better FCP/LCP and perceived performance\u003C/li>\n\u003Cli>SEO-friendly out of the box\u003C/li>\n\u003Cli>Personalized content at request time\u003C/li>\n\u003C/ul>\n\u003Cp>Cons:\u003C/p>\n\u003Cul>\n\u003Cli>Higher server cost/complexity\u003C/li>\n\u003Cli>Longer TTFB if server/data is slow\u003C/li>\n\u003Cli>Still ships client JS for interactivity\u003C/li>\n\u003C/ul>\n\u003Cp>SSR example (Next.js):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// pages/products.js (Next 12/13 pages router)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getServerSideProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> res\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://api.example.com/products'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> items\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> res.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { props: { items } };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Page\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">items\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> items.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">p\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{p.id}>{p.name}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"performance-and-seo\">Performance and SEO\u003C/h2>\n\u003Cul>\n\u003Cli>CSR: use code-splitting, lazy, and route-based bundles; prefetch data and cache aggressively.\u003C/li>\n\u003Cli>SSR: stream HTML, cache at the edge, and avoid slow blocking calls. Hydrate only what’s interactive.\u003C/li>\n\u003C/ul>\n\u003Cp>Key metrics: TTFB (server), FCP/LCP (paint), TTI (hydration/JS), CLS (layout stability).\u003C/p>\n\u003Ch2 id=\"when-to-choose-which\">When to choose which?\u003C/h2>\n\u003Cul>\n\u003Cli>Choose CSR when: app is SPA-like, authentication heavy, and SEO is limited or handled via prerendering.\u003C/li>\n\u003Cli>Choose SSR when: SEO matters, content must be visible fast, or you need per-request personalization.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"hybrids-and-modern-options\">Hybrids and modern options\u003C/h2>\n\u003Cul>\n\u003Cli>SSG/ISR: pre-render at build time and revalidate for scale.\u003C/li>\n\u003Cli>Islands/Partial Hydration (Astro): render most HTML on server, hydrate only interactive islands—great DX and performance.\u003C/li>\n\u003Cli>Edge SSR/Streaming: reduce latency and show content progressively.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"summary\">Summary\u003C/h2>\n\u003Cp>There’s no one-size-fits-all. Use SSR for content-first and SEO; use CSR for app-first interactivity. Many stacks mix both for the best user experience.\u003C/p>",{"headings":176,"localImagePaths":193,"remoteImagePaths":194,"frontmatter":195,"imagePaths":197},[177,180,183,186,189,192],{"depth":57,"slug":178,"text":179},"what-is-csr-client-side-rendering","What is CSR (Client-Side Rendering)?",{"depth":57,"slug":181,"text":182},"what-is-ssr-server-side-rendering","What is SSR (Server-Side Rendering)?",{"depth":57,"slug":184,"text":185},"performance-and-seo","Performance and SEO",{"depth":57,"slug":187,"text":188},"when-to-choose-which","When to choose which?",{"depth":57,"slug":190,"text":191},"hybrids-and-modern-options","Hybrids and modern options",{"depth":57,"slug":109,"text":110},[],[],{"title":163,"description":164,"date":79,"image":48,"tags":196},[166,167,168,169],[],"post5",{"id":198,"data":200,"body":206,"filePath":207,"digest":208,"rendered":209},{"title":201,"description":202,"date":79,"tags":203,"image":48},"15 Essential React Interview Questions (With Answers)","A concise set of React interview questions with clear answers and code examples—covering state vs props, hooks, rendering, performance, and patterns.",[204,205,46],"React","Interview","Preparing for a React interview? Here are concise, high-signal Q&As with code you can skim and practice.\n\n## 1) Props vs State\n\n- Props: external, read-only inputs to a component.\n- State: internal, mutable via setState/useState.\n\n```jsx\nfunction Greeting({ name }) { // props\n  const [count, setCount] = React.useState(0); // state\n  return (\n    \u003Cdiv>\n      \u003Cp>Hello {name}\u003C/p>\n      \u003Cbutton onClick={() => setCount(c => c + 1)}>{count}\u003C/button>\n    \u003C/div>\n  );\n}\n```\n\n## 2) Why are keys needed in lists?\n\nKeys help React identify which items changed, added, or removed for efficient reconciliation. Use stable, unique IDs—not indexes—when order can change.\n\n```jsx\nitems.map(item => \u003CItem key={item.id} {...item} />);\n```\n\n## 3) useEffect basics (deps and cleanup)\n\nRun side effects after render; declare dependencies precisely. Cleanup runs before the next effect or on unmount.\n\n```jsx\nuseEffect(() => {\n  const id = setInterval(fetchData, 5000);\n  return () => clearInterval(id); // cleanup\n}, [fetchData]);\n```\n\n## 4) useMemo vs useCallback\n\n- useMemo caches a computed value.\n- useCallback caches a function reference.\n\n```jsx\nconst total = useMemo(() => sum(list), [list]);\nconst onAdd = useCallback((x) => setList(l => [...l, x]), []);\n```\n\n## 5) Controlled vs Uncontrolled components\n\n- Controlled: value driven by state; single source of truth.\n- Uncontrolled: DOM holds state; access via refs.\n\n```jsx\n// Controlled\nconst [value, setValue] = useState(\"\");\n\u003Cinput value={value} onChange={e => setValue(e.target.value)} />\n\n// Uncontrolled\nconst ref = useRef();\n\u003Cinput ref={ref} defaultValue=\"hi\" />\n```\n\n## 6) Preventing unnecessary re-renders\n\nUse React.memo for pure components, useCallback/useMemo to stabilize props, and avoid creating new objects inline unless needed.\n\n```jsx\nconst Child = React.memo(function Child({ onClick }) { /* ... */ });\n```\n\n## 7) Lifting state up\n\nWhen two siblings need shared data, move state to their closest common ancestor and pass it down via props.\n\n## 8) Context vs Redux\n\nContext: lightweight prop drilling escape hatch. Redux/RTK: state management for complex apps (middleware, devtools, caching with RTK Query).\n\n## 9) Error boundaries\n\nClass components catching render/commit errors below them; use libraries (e.g., react-error-boundary) for hooks ergonomics.\n\n```jsx\nclass Boundary extends React.Component {\n  state = { hasError: false };\n  static getDerivedStateFromError() { return { hasError: true }; }\n  componentDidCatch(err, info) { /* log */ }\n  render() { return this.state.hasError ? \u003CFallback/> : this.props.children; }\n}\n```\n\n## 10) Lazy, Suspense, and code-splitting\n\nSplit bundles and suspense while loading.\n\n```jsx\nconst Settings = React.lazy(() => import('./Settings'));\n\u003CReact.Suspense fallback={\u003CSpinner/>}>\n  \u003CSettings />\n\u003C/React.Suspense>\n```\n\n## 11) useRef use cases\n\nPersist values across renders without causing re-renders (DOM nodes, timers, instance vars).\n\n```jsx\nconst idRef = useRef(null);\nuseEffect(() => { idRef.current = setInterval(tick, 1000); return () => clearInterval(idRef.current); }, []);\n```\n\n## 12) useReducer vs useState\n\nPrefer useReducer for multi-field or complex transitions; co-locate logic and state updates.\n\n```jsx\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'inc': return { ...state, count: state.count + 1 };\n    case 'reset': return { count: 0 };\n    default: return state;\n  }\n}\nconst [state, dispatch] = useReducer(reducer, { count: 0 });\n```\n\n## 13) Derived state pitfalls\n\nDon’t copy props to state unless you have a specific reason; derive on render or memoize.\n\n## 14) React 18: automatic batching\n\nMultiple state updates inside async callbacks batch by default, reducing extra renders.\n\n```jsx\nonClick={async () => {\n  setA(1); setB(2); // batched\n}}\n```\n\n## 15) Performance checklist\n\n- Normalize data; avoid deep prop chains.\n- Memoize expensive calculations and stable callbacks.\n- Virtualize long lists (react-window, react-virtualized).\n- Defer non-critical work (idle callbacks, Suspense streaming on server).","src/data/blog/post5.md","134b1661d7b7c239",{"html":210,"metadata":211},"\u003Cp>Preparing for a React interview? Here are concise, high-signal Q&#x26;As with code you can skim and practice.\u003C/p>\n\u003Ch2 id=\"1-props-vs-state\">1) Props vs State\u003C/h2>\n\u003Cul>\n\u003Cli>Props: external, read-only inputs to a component.\u003C/li>\n\u003Cli>State: internal, mutable via setState/useState.\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) { \u003C/span>\u003Cspan style=\"color:#6A737D\">// props\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React.\u003C/span>\u003Cspan style=\"color:#B392F0\">useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// state\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Hello {name}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">c\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>{count}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-why-are-keys-needed-in-lists\">2) Why are keys needed in lists?\u003C/h2>\n\u003Cp>Keys help React identify which items changed, added, or removed for efficient reconciliation. Use stable, unique IDs—not indexes—when order can change.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">items.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">item\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Item\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{item.id} {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">item} />);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"3-useeffect-basics-deps-and-cleanup\">3) useEffect basics (deps and cleanup)\u003C/h2>\n\u003Cp>Run side effects after render; declare dependencies precisely. Cleanup runs before the next effect or on unmount.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> id\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> setInterval\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(fetchData, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> clearInterval\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(id); \u003C/span>\u003Cspan style=\"color:#6A737D\">// cleanup\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}, [fetchData]);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"4-usememo-vs-usecallback\">4) useMemo vs useCallback\u003C/h2>\n\u003Cul>\n\u003Cli>useMemo caches a computed value.\u003C/li>\n\u003Cli>useCallback caches a function reference.\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> total\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useMemo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(list), [list]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> onAdd\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useCallback\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setList\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">l\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">l, x]), []);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"5-controlled-vs-uncontrolled-components\">5) Controlled vs Uncontrolled components\u003C/h2>\n\u003Cul>\n\u003Cli>Controlled: value driven by state; single source of truth.\u003C/li>\n\u003Cli>Uncontrolled: DOM holds state; access via refs.\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Controlled\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003Cspan style=\"color:#B392F0\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{value} \u003C/span>\u003Cspan style=\"color:#B392F0\">onChange\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e.target.value)} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Uncontrolled\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003Cspan style=\"color:#B392F0\"> ref\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ref} \u003C/span>\u003Cspan style=\"color:#B392F0\">defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"6-preventing-unnecessary-re-renders\">6) Preventing unnecessary re-renders\u003C/h2>\n\u003Cp>Use React.memo for pure components, useCallback/useMemo to stabilize props, and avoid creating new objects inline unless needed.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Child\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React.\u003C/span>\u003Cspan style=\"color:#B392F0\">memo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Child\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">onClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) { \u003C/span>\u003Cspan style=\"color:#6A737D\">/* ... */\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"7-lifting-state-up\">7) Lifting state up\u003C/h2>\n\u003Cp>When two siblings need shared data, move state to their closest common ancestor and pass it down via props.\u003C/p>\n\u003Ch2 id=\"8-context-vs-redux\">8) Context vs Redux\u003C/h2>\n\u003Cp>Context: lightweight prop drilling escape hatch. Redux/RTK: state management for complex apps (middleware, devtools, caching with RTK Query).\u003C/p>\n\u003Ch2 id=\"9-error-boundaries\">9) Error boundaries\u003C/h2>\n\u003Cp>Class components catching render/commit errors below them; use libraries (e.g., react-error-boundary) for hooks ergonomics.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Boundary\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> React\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  state\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { hasError: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  static\u003C/span>\u003Cspan style=\"color:#B392F0\"> getDerivedStateFromError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { hasError: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  componentDidCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) { \u003C/span>\u003Cspan style=\"color:#6A737D\">/* log */\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state.hasError \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Fallback\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/> \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.props.children; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"10-lazy-suspense-and-code-splitting\">10) Lazy, Suspense, and code-splitting\u003C/h2>\n\u003Cp>Split bundles and suspense while loading.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Settings\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React.\u003C/span>\u003Cspan style=\"color:#B392F0\">lazy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'./Settings'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">React.Suspense\u003C/span>\u003Cspan style=\"color:#B392F0\"> fallback\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Spinner\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/>}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Settings\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">React.Suspense\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"11-useref-use-cases\">11) useRef use cases\u003C/h2>\n\u003Cp>Persist values across renders without causing re-renders (DOM nodes, timers, instance vars).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> idRef\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useRef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { idRef.current \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setInterval\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(tick, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> clearInterval\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(idRef.current); }, []);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"12-usereducer-vs-usestate\">12) useReducer vs useState\u003C/h2>\n\u003Cp>Prefer useReducer for multi-field or complex transitions; co-locate logic and state updates.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> reducer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">action\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  switch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (action.type) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'inc'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">state, count: state.count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'reset'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    default\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">dispatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useReducer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(reducer, { count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"13-derived-state-pitfalls\">13) Derived state pitfalls\u003C/h2>\n\u003Cp>Don’t copy props to state unless you have a specific reason; derive on render or memoize.\u003C/p>\n\u003Ch2 id=\"14-react-18-automatic-batching\">14) React 18: automatic batching\u003C/h2>\n\u003Cp>Multiple state updates inside async callbacks batch by default, reducing extra renders.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  setA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(1); \u003C/span>\u003Cspan style=\"color:#B392F0\">setB\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(2); \u003C/span>\u003Cspan style=\"color:#6A737D\">// batched\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"15-performance-checklist\">15) Performance checklist\u003C/h2>\n\u003Cul>\n\u003Cli>Normalize data; avoid deep prop chains.\u003C/li>\n\u003Cli>Memoize expensive calculations and stable callbacks.\u003C/li>\n\u003Cli>Virtualize long lists (react-window, react-virtualized).\u003C/li>\n\u003Cli>Defer non-critical work (idle callbacks, Suspense streaming on server).\u003C/li>\n\u003C/ul>",{"headings":212,"localImagePaths":258,"remoteImagePaths":259,"frontmatter":260,"imagePaths":262},[213,216,219,222,225,228,231,234,237,240,243,246,249,252,255],{"depth":57,"slug":214,"text":215},"1-props-vs-state","1) Props vs State",{"depth":57,"slug":217,"text":218},"2-why-are-keys-needed-in-lists","2) Why are keys needed in lists?",{"depth":57,"slug":220,"text":221},"3-useeffect-basics-deps-and-cleanup","3) useEffect basics (deps and cleanup)",{"depth":57,"slug":223,"text":224},"4-usememo-vs-usecallback","4) useMemo vs useCallback",{"depth":57,"slug":226,"text":227},"5-controlled-vs-uncontrolled-components","5) Controlled vs Uncontrolled components",{"depth":57,"slug":229,"text":230},"6-preventing-unnecessary-re-renders","6) Preventing unnecessary re-renders",{"depth":57,"slug":232,"text":233},"7-lifting-state-up","7) Lifting state up",{"depth":57,"slug":235,"text":236},"8-context-vs-redux","8) Context vs Redux",{"depth":57,"slug":238,"text":239},"9-error-boundaries","9) Error boundaries",{"depth":57,"slug":241,"text":242},"10-lazy-suspense-and-code-splitting","10) Lazy, Suspense, and code-splitting",{"depth":57,"slug":244,"text":245},"11-useref-use-cases","11) useRef use cases",{"depth":57,"slug":247,"text":248},"12-usereducer-vs-usestate","12) useReducer vs useState",{"depth":57,"slug":250,"text":251},"13-derived-state-pitfalls","13) Derived state pitfalls",{"depth":57,"slug":253,"text":254},"14-react-18-automatic-batching","14) React 18: automatic batching",{"depth":57,"slug":256,"text":257},"15-performance-checklist","15) Performance checklist",[],[],{"title":201,"description":202,"date":79,"image":48,"tags":261},[204,205,46],[],"post3",{"id":263,"data":265,"body":273,"filePath":274,"digest":275,"rendered":276},{"title":266,"description":267,"date":268,"tags":269,"image":48},"Tailwind vs. Traditional CSS","A deep dive into TailwindCSS vs. traditional styling, performance implications, and developer experience.","2025-05-01",[270,271,272],"CSS","Tailwind","Design Systems","When it comes to styling websites, developers have long relied on traditional CSS or pre-processors like Sass. However, utility-first frameworks like Tailwind CSS have gained massive popularity. So, which approach is better?\n\n## Traditional CSS: The Classic Approach\n\nTraditional CSS provides full control over styles, allowing developers to define custom class names and apply styles globally. It's ideal for projects requiring complete design freedom, but it often leads to:\n\n- **Long Stylesheets** – Maintaining large stylesheets can become cumbersome.\n- **Naming Challenges** – Choosing meaningful class names can be tricky.\n- **Specificity Issues** – Overriding styles can lead to unintentional conflicts.\n\n## Tailwind CSS: A Utility-First Framework\n\nTailwind takes a different approach by offering pre-defined utility classes. Instead of writing custom CSS, you compose styles directly in your HTML:\n\n```html\n\u003Cbutton class=\"bg-blue-500 text-white px-4 py-2 rounded-lg\">\n  Click Me\n\u003C/button>\n```\n\n## Benefits of Tailwind:\n\n- Faster Development – No need to switch between CSS and HTML files.\n- Consistent Design – Encourages reusable design patterns.\n- Smaller CSS Files – With PurgeCSS, unused styles are removed.\n\n\n## Which One Should You Use?\n\nIf you prefer complete control and don’t mind managing stylesheets, traditional CSS is still a great option. However, if you want to speed up development and keep styles consistent, Tailwind CSS is a powerful alternative.\n\n🚀 What’s your preference? Drop a comment below!","src/data/blog/post3.md","3816ba9793267ee4",{"html":277,"metadata":278},"\u003Cp>When it comes to styling websites, developers have long relied on traditional CSS or pre-processors like Sass. However, utility-first frameworks like Tailwind CSS have gained massive popularity. So, which approach is better?\u003C/p>\n\u003Ch2 id=\"traditional-css-the-classic-approach\">Traditional CSS: The Classic Approach\u003C/h2>\n\u003Cp>Traditional CSS provides full control over styles, allowing developers to define custom class names and apply styles globally. It’s ideal for projects requiring complete design freedom, but it often leads to:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Long Stylesheets\u003C/strong> – Maintaining large stylesheets can become cumbersome.\u003C/li>\n\u003Cli>\u003Cstrong>Naming Challenges\u003C/strong> – Choosing meaningful class names can be tricky.\u003C/li>\n\u003Cli>\u003Cstrong>Specificity Issues\u003C/strong> – Overriding styles can lead to unintentional conflicts.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"tailwind-css-a-utility-first-framework\">Tailwind CSS: A Utility-First Framework\u003C/h2>\n\u003Cp>Tailwind takes a different approach by offering pre-defined utility classes. Instead of writing custom CSS, you compose styles directly in your HTML:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"bg-blue-500 text-white px-4 py-2 rounded-lg\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Click Me\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"benefits-of-tailwind\">Benefits of Tailwind:\u003C/h2>\n\u003Cul>\n\u003Cli>Faster Development – No need to switch between CSS and HTML files.\u003C/li>\n\u003Cli>Consistent Design – Encourages reusable design patterns.\u003C/li>\n\u003Cli>Smaller CSS Files – With PurgeCSS, unused styles are removed.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"which-one-should-you-use\">Which One Should You Use?\u003C/h2>\n\u003Cp>If you prefer complete control and don’t mind managing stylesheets, traditional CSS is still a great option. However, if you want to speed up development and keep styles consistent, Tailwind CSS is a powerful alternative.\u003C/p>\n\u003Cp>🚀 What’s your preference? Drop a comment below!\u003C/p>",{"headings":279,"localImagePaths":292,"remoteImagePaths":293,"frontmatter":294,"imagePaths":296},[280,283,286,289],{"depth":57,"slug":281,"text":282},"traditional-css-the-classic-approach","Traditional CSS: The Classic Approach",{"depth":57,"slug":284,"text":285},"tailwind-css-a-utility-first-framework","Tailwind CSS: A Utility-First Framework",{"depth":57,"slug":287,"text":288},"benefits-of-tailwind","Benefits of Tailwind:",{"depth":57,"slug":290,"text":291},"which-one-should-you-use","Which One Should You Use?",[],[],{"title":266,"description":267,"date":268,"image":48,"tags":295},[270,271,272],[]]